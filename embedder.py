import sys

inputFile = sys.argv[1];
className = sys.argv[2];
generatedFile = className + ".java";

print("Reading: {}".format(inputFile));
print("Generating: {}".format(generatedFile));

with open(inputFile, 'rb') as f:
	hexdata = f.read().hex()

f = open(generatedFile, 'w');
tabCounter = 0;

def writeToFile(str = "", end="\n", tab=True):
	if tab:
		f.write(getTabs())
	if str != "":
		f.write(str)
	f.write(end)

def getTabs():
	return "\t"*tabCounter;

def generateBegining():
	writeToFile("// This code is auto-generated by java-binary-embedder script")
	writeToFile("// Link: https://github.com/malciin/java-binary-embedder")
	writeToFile()

	global tabCounter
	writeToFile("import java.io.InputStream;")
	writeToFile("import java.io.ByteArrayInputStream;")
	writeToFile("import java.util.ArrayList;")
	writeToFile("import java.util.Arrays;")
	writeToFile("import java.util.regex.Pattern;")
	writeToFile()
	writeToFile("public class {} {{".format(className))
	tabCounter += 1
	writeToFile()
	writeToFile("private static byte[] bytes = null;")
	writeToFile()
	
	writeToFile("public static InputStream Get() {")
	tabCounter += 1

	writeToFile("if (bytes == null)")
	writeToFile("	generateBytes();")
	writeToFile("return new ByteArrayInputStream(bytes);")

	tabCounter -= 1
	writeToFile("}")

	writeToFile()
	writeToFile("private static void generateBytes() {")
	tabCounter += 1
	writeToFile("ArrayList<int[]> bytesGen = new ArrayList<int[]>();")
	writeToFile("	var pattern = Pattern.compile(\"data_(\\\\d+)\");")
	writeToFile("	Arrays.stream({}.class.getDeclaredMethods())".format(className))
	writeToFile("		.filter(x -> pattern.matcher(x.getName()).matches())")
	writeToFile("		.sorted((x, y) -> {")
	writeToFile("			var matcher1 = pattern.matcher(x.getName());")
	writeToFile("			var matcher2 = pattern.matcher(y.getName());")
	writeToFile("			matcher1.find(); matcher2.find();")
	writeToFile("			var first = Integer.parseInt(matcher1.group(1));")
	writeToFile("			var second = Integer.parseInt(matcher2.group(1));")
	writeToFile()		
	writeToFile("			if (second < first)")
	writeToFile("				return 1;")
	writeToFile("			return -1;")
	writeToFile("		}).forEach(method -> {")
	writeToFile("		try {")
	writeToFile("			var result = method.invoke(null);")
	writeToFile("			bytesGen.add((int[])result);")
	writeToFile("		} catch (Exception e) {")
	writeToFile("			e.printStackTrace();")
	writeToFile("		}")
	writeToFile("	});")
	writeToFile()
	writeToFile("	int elems = 0;")
	writeToFile("	for (int[] x : bytesGen)")
	writeToFile("		elems += x.length;")
	writeToFile("	bytes = new byte[elems];")
	writeToFile("	int counter = 0;")
	writeToFile("	for (int[] x : bytesGen)")
	writeToFile("		for(int v : x)")
	writeToFile("			bytes[counter++] = (byte)v;")
	tabCounter -= 1
	writeToFile('}')

generateBegining();

counter = 0;
splitted = 0;
writeToFile()
writeToFile("private static int[] data_{}() {{".format(splitted));
tabCounter += 1
writeToFile("return new int[] {");
tabCounter += 1
insertTab = True
for i in range(0, len(hexdata), 2):
	writeToFile("0x{}, ".format(hexdata[i:i+2]), end="", tab=insertTab)
	insertTab = False
	counter += 1;
	if counter % 20 == 0:
		writeToFile()
		insertTab = True
	if counter % 5000 == 4999:
		writeToFile("};")
		tabCounter -= 1
		writeToFile();
		writeToFile("}");
		tabCounter -= 1
		writeToFile();
		splitted += 1
		writeToFile("private static int[] data_{}() {{".format(splitted));
		tabCounter += 1
		writeToFile("return new int[] {");
		insertTab = True
		tabCounter += 1
writeToFile()
tabCounter -= 1;
writeToFile("};");
tabCounter -= 1
writeToFile()
writeToFile("}");
tabCounter -= 1
writeToFile("}")